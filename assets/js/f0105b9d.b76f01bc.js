"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[400],{3123:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"tutorial/initial_steps","title":"Initial Steps","description":"Below, your organization is referred to as ORGANIZATION, and your project is","source":"@site/docs/tutorial/initial_steps.md","sourceDirName":"tutorial","slug":"/tutorial/initial_steps","permalink":"/beman_doc_tools/docs/tutorial/initial_steps","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Tutorial","permalink":"/beman_doc_tools/docs/tutorial/"},"next":{"title":"Running and Editing","permalink":"/beman_doc_tools/docs/tutorial/running"}}');var o=t(4848),i=t(8453);const r={sidebar_position:3},c="Initial Steps",a={},l=[{value:"Step 1",id:"step-1",level:3},{value:"Step 2",id:"step-2",level:3},{value:"Step 3",id:"step-3",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"initial-steps",children:"Initial Steps"})}),"\n",(0,o.jsxs)(n.p,{children:["Below, your organization is referred to as ",(0,o.jsx)(n.code,{children:"ORGANIZATION"}),", and your project is\nreferred to as ",(0,o.jsx)(n.code,{children:"PROJECT_NAME"}),".  These are taken from the url for your Github\nrepo, which is expected to be something like\n",(0,o.jsx)(n.code,{children:"git@github.com:ORGANIZATION/PROJECT_NAME.git"}),".  ",(0,o.jsx)(n.code,{children:"ORGANIZATION"})," is usually\nyour Github username, or ",(0,o.jsx)(n.code,{children:"bemanproject"})," (depending on whether or not your\nproject has been put under ",(0,o.jsx)(n.code,{children:"bemanproject"})," or not)."]}),"\n",(0,o.jsx)(n.h3,{id:"step-1",children:"Step 1"}),"\n",(0,o.jsxs)(n.p,{children:["Clone your project; let's call the directory where it sits, \"",(0,o.jsx)(n.code,{children:"PROJ"}),'".']}),"\n",(0,o.jsx)(n.h3,{id:"step-2",children:"Step 2"}),"\n",(0,o.jsxs)(n.p,{children:["Clone beman_doc_tools into a subdirectory of ",(0,o.jsx)(n.code,{children:"PROJ"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"step-3",children:"Step 3"}),"\n",(0,o.jsx)(n.p,{children:"Create the baseline Docusaurus tree for your project."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-term",children:"cd PROJ/beman_doc_tools\nnpm install\nnode run build_starter_docusaurus_tree\n"})}),"\n",(0,o.jsx)(n.p,{children:"You will be asked to pick between Javascript and Typescript Docusaurus source\nfiles.  Pick Javascript unless you want to embark on an adventure."}),"\n",(0,o.jsx)(n.p,{children:"This command does a number of things.  In this order, it:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["runs ",(0,o.jsx)(n.code,{children:"npm init docusaurus ../doc classic"}),", creating the default Docusaurus\ntree, including the Docusaurus tutorial;"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"commits the default Docusaurus tree as a standalone commit, which you can\nrevert back to if you want to experiment with the default Docusaurus install\nfor learning purposes;"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["generates a ",(0,o.jsx)(n.code,{children:"docusaurus.config.js"})," specific to the Beman doc tool, and\ncopies certain Beman-specific files over the default/generated ones; and"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"removes much of the generated Docusaurus content, including its tutorial,\nand commits the final result."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["As mentioned above, Doxygen API docs are built as part of this initial build.\nIf you have no Doxygen comments, then the ",(0,o.jsx)(n.code,{children:"PROJ/doc/docs/api"})," directory will\nbe empty, and you'll get an error when you try to serve the doc pages (see the\nnext step below), since they will be full of broken links to the\n(non-existent) API pages.  To remedy this, just add a simple Doxygen comment\non a (non-",(0,o.jsx)(n.code,{children:"detail"}),"-namespace) class.  For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"/** Just to get things working.... */\nstruct foo { /* ... */ };\n"})}),"\n",(0,o.jsx)(n.p,{children:"At the time of this writing, there's no way to automatically disable the\nDoxygen API docs.  However, you can simply remove all references to API."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(6540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);