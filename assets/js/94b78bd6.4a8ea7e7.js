"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[129],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},8565:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"tutorial/running","title":"Running and Editing","description":"Step 4","source":"@site/docs/tutorial/running.md","sourceDirName":"tutorial","slug":"/tutorial/running","permalink":"/beman_doc_tools/docs/tutorial/running","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Initial Steps","permalink":"/beman_doc_tools/docs/tutorial/initial_steps"},"next":{"title":"Building and Deploying","permalink":"/beman_doc_tools/docs/tutorial/building"}}');var s=t(4848),r=t(8453);const o={sidebar_position:4},d="Running and Editing",a={},c=[{value:"Step 4",id:"step-4",level:3},{value:"Step 4-a",id:"step-4-a",level:3},{value:"Step 4-b",id:"step-4-b",level:3},{value:"Step 4-c",id:"step-4-c",level:3},{value:"Custom markup",id:"custom-markup",level:2},{value:"<code>Stdref</code>",id:"stdref",level:3},{value:"<code>Paper</code>",id:"paper",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"running-and-editing",children:"Running and Editing"})}),"\n",(0,s.jsx)(n.h3,{id:"step-4",children:"Step 4"}),"\n",(0,s.jsx)(n.p,{children:"Start the live-updated documentation website.  This is the development mode\nfor writing the docs.  This command will start a webserver and serve the docs.\nIt will create a new tab in your browser, and bring your browser and the new\ntab up immediately.  It will also detect any changes you make, as you make\nthem.  This means that you won't need to refresh the page to see changes; the\npages will simply change as you save edits to your files, and even as you add\nnew files."}),"\n",(0,s.jsx)(n.h3,{id:"step-4-a",children:"Step 4-a"}),"\n",(0,s.jsx)(n.p,{children:"Run the command itself."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-term",children:"cd PROJ/doc\nnpm run start\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-4-b",children:"Step 4-b"}),"\n",(0,s.jsxs)(n.p,{children:["Edit your Markdown files.  The full Docusaurus tree is at ",(0,s.jsx)(n.code,{children:"PROJ/doc"}),", and the\nThe Markdown files being served are found in ",(0,s.jsx)(n.code,{children:"PROJ/doc/docs"}),".  Edit those to\nwrite your documentation.  See the ",(0,s.jsx)(n.a,{href:"https://docusaurus.io/",children:"Docusaurus"})," docs\nfor details."]}),"\n",(0,s.jsx)(n.h3,{id:"step-4-c",children:"Step 4-c"}),"\n",(0,s.jsx)(n.p,{children:"If you make changes to the Doxygen comments in your source files, you need to\nre-run the building of the Doxygen API docs.  This is done when initially\nbuilding the docs.  You only need to re-run this script when you edit the\nin-source comments."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-term",children:"cd PROJ/beman_doc_tools\nnpm run build_api_docs\n"})}),"\n",(0,s.jsx)(n.h2,{id:"custom-markup",children:"Custom markup"}),"\n",(0,s.jsx)(n.p,{children:"It is possible to use custom markup in your Markdown that will get processed\nby the React layer of Docusaurus.  Here are the custom markup tags supported\nby the tool.  Note that the rules of Docusaurus dictate that the tags all be\ncaptialized."}),"\n",(0,s.jsx)(n.h3,{id:"stdref",children:(0,s.jsx)(n.code,{children:"Stdref"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Stdref"})," helps you refer to sections of the standard.  The processed markup\nwill be wrapped in brackets and will link to ",(0,s.jsx)(n.a,{href:"https://eel.is/c++draft",children:"https://eel.is/c++draft"}),".  For\nexample, ",(0,s.jsx)(n.code,{children:'<Stdref ref="view.interface"/>'})," will be replaced with this:\n[",(0,s.jsx)(n.a,{href:"https://eel.is/c++draft/view.interface",children:"view_interface"}),"]."]}),"\n",(0,s.jsx)(n.h3,{id:"paper",children:(0,s.jsx)(n.code,{children:"Paper"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Paper"})," helps you refer to WG21 papers.  You can refer to anything that works\nwith ",(0,s.jsx)(n.code,{children:"wg21.link"}),".  For example, ",(0,s.jsx)(n.code,{children:'<Paper num="P3117"/>'})," will be replaced with\nthis: ",(0,s.jsx)(n.a,{href:"https://wg21.link/P3117",children:"P3117"}),".  Note that you can include or exclude\nthe ",(0,s.jsx)(n.code,{children:"Rn"})," revision number suffix, since ",(0,s.jsx)(n.code,{children:"wg21.link"})," accepts either form."]}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["The custom markups like ",(0,s.jsx)(n.code,{children:"Stdref"})," don't come through Doxygen and Moxygen\nunmolested.  To preserve their formatting, you need to escape the first ",(0,s.jsx)(n.code,{children:"<"}),",\nlike this:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'/** My Doxygen comment refers to \\<Stdref ref="view.interface"/> */\nstruct foo;\n'})})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);