"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[129],{8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var i=s(6540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},8565:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"tutorial/running","title":"Running and Editing","description":"Step 4","source":"@site/docs/tutorial/running.md","sourceDirName":"tutorial","slug":"/tutorial/running","permalink":"/beman_doc_tools/docs/tutorial/running","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Initial Steps","permalink":"/beman_doc_tools/docs/tutorial/initial_steps"},"next":{"title":"Building and Deploying","permalink":"/beman_doc_tools/docs/tutorial/building"}}');var t=s(4848),o=s(8453);const r={sidebar_position:4},c="Running and Editing",a={},d=[{value:"Step 4",id:"step-4",level:3},{value:"Step 4-a",id:"step-4-a",level:3},{value:"Step 4-b",id:"step-4-b",level:3},{value:"Step 4-c",id:"step-4-c",level:3},{value:"Custom markup",id:"custom-markup",level:2},{value:"<code>Stdref</code>",id:"stdref",level:3},{value:"<code>Paper</code>",id:"paper",level:3},{value:"Sampling source code in your docs",id:"sampling-source-code-in-your-docs",level:2},{value:"How files are searched for tagged regions",id:"how-files-are-searched-for-tagged-regions",level:3},{value:"Tag-comment syntax",id:"tag-comment-syntax",level:3},{value:"Split tagged regions",id:"split-tagged-regions",level:3},{value:"Nested tagged regions",id:"nested-tagged-regions",level:3},{value:"Plugin configuration",id:"plugin-configuration",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"running-and-editing",children:"Running and Editing"})}),"\n",(0,t.jsx)(n.h3,{id:"step-4",children:"Step 4"}),"\n",(0,t.jsx)(n.p,{children:"Start the live-updated documentation website.  This is the development mode\nfor writing the docs.  This command will start a webserver and serve the docs.\nIt will create a new tab in your browser, and bring your browser and the new\ntab up immediately.  It will also detect any changes you make, as you make\nthem.  This means that you won't need to refresh the page to see changes; the\npages will simply change as you save edits to your files, and even as you add\nnew files."}),"\n",(0,t.jsx)(n.h3,{id:"step-4-a",children:"Step 4-a"}),"\n",(0,t.jsx)(n.p,{children:"Run the command itself."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-term",children:"cd PROJ/doc\nnpm run start\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-4-b",children:"Step 4-b"}),"\n",(0,t.jsxs)(n.p,{children:["Edit your Markdown files.  The full Docusaurus tree is at ",(0,t.jsx)(n.code,{children:"PROJ/doc"}),", and the\nThe Markdown files being served are found in ",(0,t.jsx)(n.code,{children:"PROJ/doc/docs"}),".  Edit those to\nwrite your documentation.  See the ",(0,t.jsx)(n.a,{href:"https://docusaurus.io/",children:"Docusaurus"})," docs\nfor details."]}),"\n",(0,t.jsx)(n.h3,{id:"step-4-c",children:"Step 4-c"}),"\n",(0,t.jsx)(n.p,{children:"If you make changes to the Doxygen comments in your source files, you need to\nre-run the building of the Doxygen API docs.  This is done when initially\nbuilding the docs.  You only need to re-run this script when you edit the\nin-source comments."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-term",children:"cd PROJ/beman_doc_tools\nnpm run build_api_docs\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsxs)(n.p,{children:["When writing your Doxygen comments, you can use markdown syntax, like using\nbackticks (`) for code font.  However, if you backtick-quote a type name that\nis indexed by Doxygen, this will break the intra-API links that Doxygen\nautogenerates.  So, when documenting class ",(0,t.jsx)(n.code,{children:"foo"}),", if I refer to class ",(0,t.jsx)(n.code,{children:"bar"}),", I\nshould do it like this:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"/** Use bar instead if you need a sorted sequence. */\nstruct foo;\n"})}),(0,t.jsx)(n.p,{children:"If you write this:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"/** Use `bar` instead if you need a sorted sequence. */\nstruct foo;\n"})}),(0,t.jsxs)(n.p,{children:["... you will get the markdown link syntax, quoted directly, something like,\n",(0,t.jsx)(n.code,{children:"(link-text)[link-target]"}),"."]})]}),"\n",(0,t.jsx)(n.h2,{id:"custom-markup",children:"Custom markup"}),"\n",(0,t.jsx)(n.p,{children:"It is possible to use custom markup in your Markdown that will get processed\nby the React layer of Docusaurus.  Here are the custom markup tags supported\nby the tool.  Note that the rules of Docusaurus dictate that the tags all be\ncapitalized."}),"\n",(0,t.jsx)(n.h3,{id:"stdref",children:(0,t.jsx)(n.code,{children:"Stdref"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Stdref"})," helps you refer to sections of the standard.  The processed markup\nwill be wrapped in brackets and will link to ",(0,t.jsx)(n.a,{href:"https://eel.is/c++draft",children:"https://eel.is/c++draft"}),".  For\nexample, ",(0,t.jsx)(n.code,{children:'<Stdref ref="view.interface"/>'})," will be replaced with this:\n[",(0,t.jsx)(n.a,{href:"https://eel.is/c++draft/view.interface",children:"view_interface"}),"]."]}),"\n",(0,t.jsx)(n.h3,{id:"paper",children:(0,t.jsx)(n.code,{children:"Paper"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Paper"})," helps you refer to WG21 papers.  You can refer to anything that works\nwith ",(0,t.jsx)(n.code,{children:"wg21.link"}),".  For example, ",(0,t.jsx)(n.code,{children:'<Paper num="P3117"/>'})," will be replaced with\nthis: ",(0,t.jsx)(n.a,{href:"https://wg21.link/P3117",children:"P3117"}),".  Note that you can include or exclude\nthe ",(0,t.jsx)(n.code,{children:"Rn"})," revision number suffix, since ",(0,t.jsx)(n.code,{children:"wg21.link"})," accepts either form."]}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsxs)(n.p,{children:["The custom markups like ",(0,t.jsx)(n.code,{children:"Stdref"})," don't come through Doxygen and Moxygen\nunmolested.  To preserve their formatting, you need to escape the first ",(0,t.jsx)(n.code,{children:"<"}),",\nlike this:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'/** My Doxygen comment refers to \\<Stdref ref="view.interface"/> */\nstruct foo;\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"sampling-source-code-in-your-docs",children:"Sampling source code in your docs"}),"\n",(0,t.jsx)(n.p,{children:"This tool comes with a plugin that samples lines from your source code, and\nplaces those lines in your documentation, without your having to copy and\npaste."}),"\n",(0,t.jsx)(n.p,{children:"For instance, say you have this in one of your source files."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"auto foo()\n{ return 42; }\n"})}),"\n",(0,t.jsx)(n.p,{children:'To sample that function, you need to put special comments that give a name (a\n"sample tag") to the section you want to sample.  From now on, we\'ll refer to\nlines delimited this way as a "tagged region".'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"// [ foo_func\nauto foo()\n{ return 42; }\n// ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then, you write this in one of your markdown files, using the same tag."}),"\n",(0,t.jsx)("code",{children:(0,t.jsxs)(n.p,{children:["```cpp foo_func",(0,t.jsx)("br",{}),"\n```"]})}),"\n",(0,t.jsx)(n.p,{children:"The code sampling plugin will change your markdown to include the tagged\nregion, as if you wrote this."}),"\n",(0,t.jsx)("code",{children:(0,t.jsxs)(n.p,{children:["```cpp",(0,t.jsx)("br",{}),"\nauto foo()",(0,t.jsx)("br",{}),"\n{ return 42; }",(0,t.jsx)("br",{}),"\n```"]})}),"\n",(0,t.jsxs)(n.p,{children:["Note that the ",(0,t.jsx)(n.code,{children:"//"})," tag comment lines from the source file are omitted."]}),"\n",(0,t.jsx)(n.h3,{id:"how-files-are-searched-for-tagged-regions",children:"How files are searched for tagged regions"}),"\n",(0,t.jsxs)(n.p,{children:["All files under ",(0,t.jsx)(n.code,{children:"../src"})," and ",(0,t.jsx)(n.code,{children:"../include"})," are searched.  These are relative to\nthe ",(0,t.jsx)(n.code,{children:"PROJ/doc"})," directory that the Docusaurus files are in, so those correspond\nto ",(0,t.jsx)(n.code,{children:"PROJ/src"})," and ",(0,t.jsx)(n.code,{children:"PROJ/include"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The only files searched are likely C++ files.  A C++-specific subset of the\n(very long) list of extensions accepted by Doxygen is used by the code sampler\nplugin."}),"\n",(0,t.jsx)(n.p,{children:"These are only defaults.  The paths in which to look for files, and the file\nextensions required for files, are each configurable.  See the section on\nconfiguration below."}),"\n",(0,t.jsx)(n.h3,{id:"tag-comment-syntax",children:"Tag-comment syntax"}),"\n",(0,t.jsxs)(n.p,{children:["The sample comment lines must be single-line comments, consisting only of the\ntokens ",(0,t.jsx)(n.code,{children:"//"}),", ",(0,t.jsx)(n.code,{children:"["}),", ",(0,t.jsx)(n.code,{children:"]"}),", and a tag identifier.  An open-tag comment has the form\n",(0,t.jsx)(n.code,{children:"// [ {identifier}"}),".  A close-tag comment has the form ",(0,t.jsx)(n.code,{children:"// ]"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Identifiers (tag-names) are matched using the Javascript regex ",(0,t.jsx)(n.code,{children:"\\w+"}),", which is\nthe same as ",(0,t.jsx)(n.code,{children:"[A-Za-z0-9_]+"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Arbitrary amounts of whitespace are ignored before, after, and between the\ntokens."}),"\n",(0,t.jsx)(n.p,{children:"If the code sampler plugin sees an open-tag comment that remains unclosed at\nend of the file, or sees a close-tag comment when there is no currently-open\ntag, it will throw an exception."}),"\n",(0,t.jsx)(n.h3,{id:"split-tagged-regions",children:"Split tagged regions"}),"\n",(0,t.jsx)(n.p,{children:"You can split a sampled region up into multiple sections for convenience.\nConsider this source code."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"// [ foo_func\nint foo()\n{\n    step1();\n// ]\n    step2();\n// [ foo_func\n    step3();\n}\n// ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When you sample ",(0,t.jsx)(n.code,{children:"foo_func"})," into your docs, you'll get this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"int foo()\n{\n    step1();\n    step3();\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["However, a particular sample tag may only be used multiple times ",(0,t.jsx)(n.em,{children:"within the\nsame file"}),".  If you re-use ",(0,t.jsx)(n.code,{children:"foo_func"})," above in another file, the code sampler\nplugin will throw an exception."]}),"\n",(0,t.jsx)(n.h3,{id:"nested-tagged-regions",children:"Nested tagged regions"}),"\n",(0,t.jsx)(n.p,{children:"It is also possible to nest taggged regions.  This is useful when you want to\nsample an entire file or function, and then have smaller snippets that you\ndiscuss elsewhere, one at a time.  Consider this example."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"// [ entire_file\n// [ includes\n#include <foo.h>\n// ]\n\n// [ main\nint main()\n{\n   // etc...\n}\n// ]\n// ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"entire_file"})," tag refers to the entire file, minus the open- and close-tag\nlines.  The ",(0,t.jsx)(n.code,{children:"includes"})," tag refers to just the includes, and the ",(0,t.jsx)(n.code,{children:"main"})," tag\nrefers only to the lines of ",(0,t.jsx)(n.code,{children:"main()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Nesting and split tags may be combined.  Here is an example."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"// [ entire_file\n// [ includes\n#include <foo.h>\n// ]\n\n// [ main\nint main()\n{\n// ]\n// [ main\n   // etc...\n}\n// ]\n// ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The tagged regions in this example are identical to the tagged regions in the\nprevious example \u2014 the fact that ",(0,t.jsx)(n.code,{children:"main"})," is split up does not change which\nlines are associated with which tags."]}),"\n",(0,t.jsx)(n.h3,{id:"plugin-configuration",children:"Plugin configuration"}),"\n",(0,t.jsxs)(n.p,{children:["The code sampler plugin can be configured by providing an options object along\nwith it in ",(0,t.jsx)(n.code,{children:"docusaurus.config.js"}),".  So, instead of the current enablement of\n",(0,t.jsx)(n.code,{children:"code_sampler"})," by itself:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"docs: {\n  sidebarPath: './sidebars.js',\n  remarkPlugins: [code_sampler],\n},\n"})}),"\n",(0,t.jsx)(n.p,{children:"... you would provide the plugin, plus a configuration object."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"docs: {\n  sidebarPath: './sidebars.js',\n  remarkPlugins: [[code_sampler, {/* options here ... */}]],\n},\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you do not provide an object, or only provide a subset of possible options,\nthe other options will have their default values.  Here are the options."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:".roots"})," This must be a list (",(0,t.jsx)(n.code,{children:"[]"}),") of strings, indicating paths relative to\n",(0,t.jsx)(n.code,{children:"PROJ/doc"})," where your code can be found."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:".extensions"})," This must be a list (",(0,t.jsx)(n.code,{children:"[]"}),") of strings, each of which is an\nacceptable file extension (",(0,t.jsx)(n.code,{children:'".cpp"'}),", ",(0,t.jsx)(n.code,{children:'".c++"'}),", etc.)."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);